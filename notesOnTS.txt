filiks notes on ts
-------------------

- writing ts is the same as js with some 'extra documentation'
- typescript has no effect on how our code gets executed by the browser or node
- its acting like a friend / pair-programmer / realtime-error-linter

run ts copiler on node:
tsc index.ts

--> convert to index.js


def: Interface: 
----------------
  creates a new type, describing the property names anf value types of an object

- are used to define the structure of an object. 
- defines a new Type!
- nice SideEffect: it encourages us to write more generic reusable code / functions in TS


// to call printVehicle you must pass an object that meets the specification defined in a Interface (Vehicle)
const printVehicle = (vehicle: Vehicle): void => { }

- general Strategy for re-usable code in TS: 
  -> create functions that accept arguments that are typed with interfaces!
  -> objects classes can decide to 'implement' a given interface to work with a function 
  (think as interface work as a gatekeeper!)


Type:
          example:
string:   "", '', 'Monday'
number:   0.02, -40,
boolean   true, false
Date:     new Date()
Todo:     {id: 1, completed: true, title: "Trash"}


Primitive Types:

number
boolean
void
undefined
string
symbol
null

Object Types: 

functions
arrays
classes
objects



def:  Type ANNOTATION:
  Code we add to tell Typescript what type of value a variable will refer to

def: Type INFERENCE:
Typescript tries to (automaticly) figure out what [THE HELL] type of value a variable refers to. 

  -> if decalaration and initaialisazion are on the same line, TS will figure out the type for us.

  -> we use type INFERENCE ? Always!  (do not declare the obvious)

  -> when to use Type ANNOTATION ? 
      - when we declare a var and initialize later
      - when we want a var forcing tho have a type
      - when a function returns 'any' and we want to clarify the value


function ANNOTATION:
describe what parameter-types go in and how the return value is expected:

  const logNumber: (i: number) => void = (i: number ) => {
    console.log('i:', i)
  }



Type ANY: TS has no idea what type it actually is. 

1.
// flexible Types: this array can contain date-types and /or strings:

const importantDates: (Date | string)[] = []
importantDates.push('2030-10-4') // valid 
importantDates.push(new Date('2043-3-10')) // valid
importantDates.push(200) // InValid !

2.
// addMarker accepts User or Company 
addMarker(mappable: User | Company): void {}


def: Tuples: 
  Array-like structur where each element represent some property of a record
  -> order wihtin is crucial!
  example:
  [ brown, true, 42 ]



void: function returns nothing!



Type definition files:

  - between TS Code and 3rd party libraries. 
  - kind of an adapter -/ layer
  - often available on npm as special / aditional package ("@types/faker": "^4.1.11",)

install like that
npm install @types/faker


keyword implements:
// make sure this interface is used and gets implement correctly
export class Company implements Mappable {}

